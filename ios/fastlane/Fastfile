# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

#fastlane 도큐먼트 : https://docs.fastlane.tools/
#fastlane 설명참조 : https://sweepty.github.io/deploy-flutter-app-using-fastlane
#slack docs 링크 : https://docs.fastlane.tools/actions/slack/

#dev 빌드 : fastlane beta --env dev
#prod 빌드 : fastlane beta --env prod

default_platform(:ios)

platform :ios do
  desc "testflight 배포"
  lane :prod do
    begin
      # Send slack message
      before_send_slack_message(msg: "💫 IOS TestFlight 배포를 시작합니다.")
      
      # Flutter build iOS (code sign 없이 build 만 진행)
      # flutter_build_ios

      # Add badge to app icon (only dev)
      # add_badge_to_icon

      # Build app
      # build_app(workspace: "Runner.xcworkspace", scheme: "Runner")

      # Build app (prod scheme로 배포)
      build_app(workspace: "Runner.xcworkspace", scheme: "Runner") 

      # Upload to testflight
      upload_to_testflight

      # firebase distribute
      # firebase_app_distribution(
      #   app: "1:50123170581:ios:bffcc1669cb54a0c4fff1c",
      #   ipa_path: "../build/ios/ipa/공맵(dev).ipa",
      #   groups: "gongmap_ios"
      # )


      # Send slack message
      after_send_slack_message(msg: "🚀 Successfully distributed a new beta build ✨")
    ensure #finally
      # 앱 아이콘 이미지 초기화
      # icon_initialize
    end
  end  

  # Before Send slack message
  lane :before_send_slack_message do |options|
    yaml_file_path = "../../pubspec.yaml"
    data = YAML.load_file(yaml_file_path)
    version = data["version"].split("+")[0]
    build_number = data["version"].split("+")[1]
    slack(
      message: options[:msg],
      payload: {
        "Version" => version,
        "Build" => build_number,
        "Environment" => "#{ENV['ENV_EMOJI']} #{ENV['ENV']}"
      },
    )
  end

  # icon initialize
  # lane :icon_initialize do
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png")
    
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png")
    
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png")
    
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png")

  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png")
  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png")

  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png")

  #   sh("cp", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x_copy.png", "../Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png")
  # end

  # After Send slack message
  lane :after_send_slack_message do |options|
    version = get_version_number(xcodeproj: "Runner.xcodeproj")
    build_number = get_build_number(xcodeproj: "Runner.xcodeproj")
    slack(
      message: options[:msg],
      # channel: "#channel",
      payload: {
        "Version" => version,
        "Build" => build_number,
        "Environment" => "#{ENV['ENV_EMOJI']} #{ENV['ENV']}"
      },
    )
  end

  # Flutter build iOS
  lane :flutter_build_ios do


    # sh("pod", "repo", "update")
    # sh("flutter", "clean")
    puts "Flutter build iOS"
    if ENV["ENV"] == "dev"
      sh("flutter", "build", "ipa", "--flavor", ENV['ENV'] , "-t", ENV['MAIN_TARGET'], "--export-method", "ad-hoc")
    end
    
    if ENV["ENV"] == "prod"
      sh("flutter", "build", "ios", "--flavor", ENV['ENV'] , "-t", ENV['MAIN_TARGET'],"--no-codesign")
    end

  end
  
  
  # Add badge to app icon(brew install rbenv ruby-build -> rbenv install 2.7.2)
  # private_lane :add_badge_to_icon do
  #   if ENV["ENV"] == "dev"
  #     badge(alpha: true, dark: true)
  #   end
  # end
  
  # Error handling
  error do |lane, exception|
    slack(
      message: "😱 "+exception.message,
      success: false
    )
  end
end